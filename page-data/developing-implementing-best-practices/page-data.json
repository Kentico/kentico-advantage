{"componentChunkName":"component---src-pages-kontent-item-phase-elements-url-value-js","path":"/developing-implementing-best-practices/","result":{"data":{"kontentItemPhase":{"system":{"id":"6e2d1894-f0d5-4b57-891f-a64bbbf72b83"},"elements":{"title":{"value":"Implementing best practices"},"url":{"value":"developing-implementing-best-practices"},"content":{"value":"<h2>Security</h2>\n<p>There are two sides to security. The first is related to properly configuring access to content and functionality for authorized users.<br>\n<br>\nThe second is making sure that hackers are not able to exploit flaws in the implementation to gain unauthorized access to content and functionality.<br>\n<br>\nWhen it comes to Kentico Xperience with MVC development you need to consider the following:</p>\n<ul>\n  <li>User permissions and access control lists (ACLs)</li>\n  <li>Proper configuration of controllers/views/page builder widgets</li>\n  <li>Sanitization of user input to SQL injections and cross site scripting attacks</li>\n  <li>Secure data storage/transfer</li>\n</ul>\n<p>Kentico administration UI and APIs make it easy for you to secure your application by providing an easy to use UI, some automatic protections, and tools to make sure you are able to easily secure your code.</p>\n<h2>Performance</h2>\n<p>Many times, developers primarily focus on just making sure what they build is functional. This can lead to scalability issues, higher running costs, or even dissatisfied users.<br>\n<br>\nKentico does a lot of optimization automatically, and provides lots of ways to get better performance out of your project with features like:</p>\n<ul>\n  <li>Caching in <a href=\"https://docs.xperience.io/configuring-xperience/configuring-caching/caching-on-mvc-sites\">MVC</a></li>\n  <li>APIs that can be fine tuned to retrieve only the necessary data.</li>\n  <li>Built in&nbsp;<a href=\"https://docs.xperience.io/developing-websites/troubleshooting-websites/debugging\">debugging</a>&nbsp;tools allow easy access and visibility into the inner workings of the system.</li>\n</ul>\n<p>It's important to note that while Kentico Xperience does a lot of things automatically, it can be very easy to introduce performance issues. Here are a few practices to keep in mind as you develop:</p>\n<ul>\n  <li>Introduce as few (ideally zero) SQL queries as possible.</li>\n  <li>Make sure that you have a&nbsp;<a href=\"https://docs.kentico.com/k12/configuring-kentico/configuring-caching/caching-on-portal-engine-sites/caching-best-practices-for-typical-projects\">caching strategy</a>&nbsp;and that it is working.</li>\n  <li>Review the performance of your custom code using the debugging tools in the administration interface.</li>\n  <li>Review how the project is configured, as some options like analytics and online marketing features can add some overhead to requests (only enable what you need).</li>\n  <li>Consider first page load time as well as primed cache load time.</li>\n  <li>Consider integrating third-party tools to gain further improvements such as&nbsp;<a href=\"http://devnet.kentico.com/articles/html-minification-with-webmarkupmin\">minifying your HTML with WebMarkupMin</a>.&nbsp;</li>\n</ul>\n<h2>Dependencies</h2>\n<p>When building something new, you need to consider what it depends on (data structures, third party APIs, etc.) and what will depend on it (templates, custom modules, etc.).<br>\n<br>\nIt is important to plan how what you are building will interact with its dependencies in order to avoid re-work or extra effort. This is also important when considering how to deploy new features/functionality down the line.<br>\n<br>\nSome examples of dependencies to think about in Kentico Xperience include:</p>\n<ul>\n  <li>Page types, content, and components needed before being able to build a page.</li>\n  <li><a href=\"https://docs.xperience.io/configuring-xperience/configuring-caching/setting-cache-dependencies\">Cache dependencies</a>&nbsp;being configured properly.</li>\n  <li>Code files and resource strings for a custom module class needed before developing module UI.</li>\n  <li>Third party libraries must be available in .NET or as a web API before you can interact with them inside a Kentico project.</li>\n  <li>Relationships between custom built features must be understood.</li>\n</ul>\n<h2>Maintainability</h2>\n<p>Whether the project will be maintained by the same team or not, implementations should be created with future maintenance in mind.<br>\n<br>\nIf something is built sloppily the first time, maintenance can easily be exponentially more costly. It is important to consider every aspect of what you are developing when it comes to maintainability.<br>\n<br>\nFor example, you will want to pay attention to some of the following things in Kentico:</p>\n<ul>\n  <li>Name code files appropriately (e.g. use the class name of the class contained in the file).</li>\n  <li>Use Kentico's logging APIs to log success/failure/warning/information appropriately.</li>\n  <li>Consider refactoring large methods and using abstraction layers to make code readable and reusable.</li>\n  <li>Use built-in extensibility points such as&nbsp;<a href=\"https://docs.xperience.io/custom-development/handling-global-events\">global events</a>&nbsp;or&nbsp;<a href=\"https://docs.xperience.io/custom-development/customizing-providers\">providers</a>.</li>\n  <li>Use an appropriate naming convention to avoid collisions with system objects, especially during upgrades/hotfixes (e.g. prefix things with an abbreviated version of the site/project name).</li>\n</ul>\n<h2>User experience</h2>\n<p>This applies to both editors and visitors. Your solutions should be built with ease of use in mind. Your editors will have an easier time keeping the site up to date, and your visitors will be more engaged.<br>\n<br>\nSome examples of how you can create a good experience for editors and visitors are:</p>\n<ul>\n  <li>Utilize MVC widgets rather than page type content only for personalization and/or AB testing to allow your editors to have more flexibility when creating a page.</li>\n  <li>Build integrations that require simple interaction or are automatically run.</li>\n  <li>Utilize custom modules to extend the system in a complex way while maintaining a consistent and easy to use user interface for editors.</li>\n  <li>Don't require more information than necessary from visitors.</li>\n  <li>Provide visitors with a customized experience based on their history or context.</li>\n  <li>Make it easy for visitors to fall into the pit of success.</li>\n  <li>Consider page load times for visitors (the faster the better).</li>\n</ul>\n<h2>Extensibility</h2>\n<p>Projects are very rarely built once and never extended. Thinking about how a feature might need to be enhanced&nbsp;in the future can help save effort and time in the future.<br>\n<br>\nHowever, do bear in mind that there is a need to balance the effort/time with the project's budget/timeline. Be sure to think about:</p>\n<ul>\n  <li>Consider how data will grow and change in the future.</li>\n  <li>Think about future integrations or features that need to be added.</li>\n</ul>\n<p>Consider building on Kentico built in extensibility points to help with this process:</p>\n<ul>\n  <li>The portal engine enables rapid development and flexibility.</li>\n  <li>Use custom modules.</li>\n  <li>Investigate event handlers.</li>\n  <li>Look for&nbsp;<a href=\"https://docs.xperience.io/custom-development/customizing-providers\">providers</a>&nbsp;to override/extend.</li>\n</ul>\n<h2>Testing</h2>\n<p>You should always verify that what you've built functions as intended. This includes negative testing to make sure that unintended behavior is guarded against. More details on this can be found in the&nbsp;<a href=\"/testing\">Testing</a>&nbsp;section.</p>","images":[],"links":[],"modular_content":[]},"overview":{"value":"<p>Save time and effort by encouraging your developers to remember some key concepts such as performance and security.</p>"},"teaser":{"value":"<p>As the development starts, you need to ensure that the developers are following best practices. It can be difficult to identify what best practices to follow for a particular implementation, but we identified&nbsp;<a href=\"https://www.youtube.com/watch?v=uf_OunojW-M&amp;index=1&amp;list=PL9RdJplq_ukamszWm4UMmHmtfsebzjXKB\">7 Key Concepts for Successful Development in Kentico</a>.&nbsp;Each of these concepts are applied differently depending on the particular requirements and details of the task at hand.&nbsp;However, the basics of these concepts can be applied broadly.</p>"},"icon":{"value":[{"url":"https://assets-us-01.kc-usercontent.com:443/c1b57fce-743a-0048-c4ee-4f8c42ea3ab8/bf687281-a068-4ee6-a8da-f122711116ec/icon-developing.svg"}]},"background":{"value":[{"codename":"brown"}]},"scenarios":{"value":[{"__typename":"kontent_item_scenario","system":{"id":"0a142722-dcb7-45af-a34c-7517d011b1a1"},"elements":{"detail":{"value":"<p>A partner is working on a template for an online magazine to list public and subscriber only articles in a category.<br>\n<br>\nThe client requires that if a visitor logs in as a subscriber, they will see an additional set of subscriber only articles. Visitors will also see suggested articles based on personas and be able to subscribe to articles in a category via RSS.</p>\n<p><strong>Dependencies</strong></p>\n<ul>\n  <li>The articles and categories will need to be in place before building this template.</li>\n  <li>RSS feed readers will need standardized RSS feeds in order to properly subscribe. The RSS feed web parts/controls will enable this with minimal effort.</li>\n</ul>\n<p><strong>Performance</strong></p>\n<ul>\n  <li>The article lists do not show all the fields that are defined in an article page type. Specify only required columns to reduce the amount of data retrieved from SQL.</li>\n  <li>The page doesn't have any dynamic user input. Consider adding output caching with appropriate cache dependencies to further speed up page loads.</li>\n  <li>Author information is externally referenced from the articles. Consider either a custom SQL query to retrieve both the article and the relevant author in one query or get author data separately and caching that separately.</li>\n  <li>Consider paging content.</li>\n</ul>\n<p><strong>Security</strong></p>\n<ul>\n  <li>Configure the subscriber only article list to only display to subscribers.</li>\n  <li>Configure the main article list and RSS feed to check permissions.</li>\n  <li>Make sure you sanitize the category when using it as it is going to come from the user via the URL (e.g. SQL injection through where clause, XSS by displaying on the page).</li>\n</ul>\n<p><strong>Maintainability</strong></p>\n<ul>\n  <li>Be sure to clearly label/identify web parts and control IDs so that it is clear what they are used for.</li>\n</ul>\n<p><strong>Extensibility</strong></p>\n<ul>\n  <li>As categories are added or removed, the page automatically updates.&nbsp;</li>\n</ul>\n<p><strong>User experience</strong></p>\n<ul>\n  <li>This page is entirely dynamic, so editors don't have to worry about updating the content.&nbsp;</li>\n  <li>As performance was considered, visitors experience faster page loads.&nbsp;</li>\n  <li>Visitors also see personalized content based on prior activity on the site, increasing delight.</li>\n</ul>\n<p><strong>Testing</strong></p>\n<ul>\n  <li>Be sure to test a variety of use cases, such as:\n    <ul>\n      <li>Subscriber access</li>\n      <li>Anonymous access</li>\n      <li>Invalid category names</li>\n      <li>Attempt SQL/XSS injection (either do&nbsp;benign attacks&nbsp;or&nbsp;perform&nbsp;on a separate copy)</li>\n      <li>Category with no content</li>\n      <li>Persona testing</li>\n      <li>Test RSS</li>\n      <li>Etc.</li>\n    </ul>\n  </li>\n</ul>"},"title":{"value":"Adding a category page with personas and secured content"}}},{"__typename":"kontent_item_scenario","system":{"id":"19d4d90b-5b7b-4a7a-a351-e476b0dad447"},"elements":{"detail":{"value":"<p>The online magazine project requires the use of an existing subscriber database. Subscribers will log in to the Kentico site using their existing credentials. When the visitor logs in, they will be authenticated against the external system.<br>\n<br>\nFrom a technical perspective, we'll add a global event handler ensuring&nbsp;<a href=\"https://docs.xperience.io/custom-development/handling-global-events/handling-custom-administration-authentication\">external authentication</a>.</p>\n<p><strong>Dependencies</strong></p>\n<ul>\n  <li>This will require the third party subscriber database. You will need to be able to gracefully handle the subscriber database not being available.</li>\n  <li>The third party database will need to allow us to authenticate a user and retrieve their roles so that we can assign appropriate roles for permissions.</li>\n</ul>\n<p><strong>Performance</strong></p>\n<ul>\n  <li>It might be better to regularly update user roles and assignments on a scheduled basis rather than on login to prevent extra work on every login to update roles.</li>\n</ul>\n<p><strong>Security</strong></p>\n<ul>\n  <li>Make sure the communication with the third party subscriber database is secure.</li>\n  <li>Make sure that role import/assignment doesn't end up adding a subscriber to an editor/administrator role.</li>\n  <li>Make sure to apply appropriate permissions to imported roles.</li>\n</ul>\n<p><strong>Maintainability</strong></p>\n<ul>\n  <li>As we are extending the built-in functionality we will want to make sure to do a few things:\n    <ul>\n      <li>Store the custom files in a logical place (e.g. /App_Code/OMI/SubscriberAuthentication.cs, where OMI is an abbreviation for our client name Online Magazine Inc.).</li>\n      <li>Prefix all imported roles so that they are easier to identify (e.g. OMS All Access, where OMS stands for Online Magazine Subscriber).</li>\n      <li>Add appropriate event log entries for issues like failure to connect to the subscriber database.</li>\n    </ul>\n  </li>\n  <li>Consider using an API or abstraction layer to interface with the third party database rather than directly writing a lot of custom code in the authentication event handler.</li>\n</ul>\n<p><strong>Extensibility</strong></p>\n<ul>\n  <li>As additional roles may be added in the future, roles should be dynamically created/updated.</li>\n  <li>Future updates may bring over additional profile information into Kentico.</li>\n</ul>\n<p><strong>User experience</strong></p>\n<ul>\n  <li>Editors/Administrators can use the built-in features for role permissions.</li>\n  <li>Visitors do not&nbsp;have to change/update their account information just because a new web site was launched.</li>\n</ul>\n<p><strong>Testing</strong></p>\n<ul>\n  <li>Test logging in with:\n    <ul>\n      <li>A pre-existing Kentico user/password</li>\n      <li>A pre-existing subscriber user/password</li>\n      <li>A pre-existing subscriber user with the wrong password</li>\n      <li>A non-existent subscriber user/password</li>\n    </ul>\n  </li>\n  <li>Verify that roles are assigned and created properly.</li>\n  <li>Verify that users are created and assigned to the site properly.</li>\n  <li>Consider using&nbsp;<a href=\"https://docs.xperience.io/custom-development/writing-automated-tests\">automated tests</a>&nbsp;to verify custom functionality automatically.</li>\n</ul>"},"title":{"value":"Integrating with an existing authorization service"}}},{"__typename":"kontent_item_scenario","system":{"id":"068fd85e-bde3-4f0b-8b3f-fe33023f8ba2"},"elements":{"detail":{"value":"<p>Our online magazine project has a lot of content, but they also want to syndicate content from another service.<br>\n<br>\nAs there is a lot of this content, it was decided that a custom module would be created to manage this on the site. This content needs to be automatically imported on a regular basis.</p>\n<p><strong>Dependencies</strong></p>\n<ul>\n  <li>This will require the third party syndication service. You will need to be able to gracefully handle the syndication service not being available.</li>\n  <li>The syndication service will need to support us asking for content between certain dates.</li>\n  <li>This will require enabling synchronization tasks for our custom class if we have web farms.</li>\n</ul>\n<p><strong>Performance</strong></p>\n<ul>\n  <li>You will need to use the most recent article to request only articles that are newer than that.</li>\n  <li>Consider setting this up as an external scheduled task and perform the import on a separate server to reduce overhead on the main production server(s).</li>\n  <li>Consider updating whatever caches you have set up with the new data.</li>\n</ul>\n<p><strong>Security</strong></p>\n<ul>\n  <li>Make sure the communication with the syndication service is secure.</li>\n  <li>Lock down the custom module to only those editor roles that need it.</li>\n  <li>Provide editors with read only access to the custom module.</li>\n  <li>Store authentication for third party service securely and make it editable in the web.config or settings keys.</li>\n</ul>\n<p><strong>Maintainability</strong></p>\n<ul>\n  <li>As we are extending built-in functionality we will want to make sure to do a few things:\n    <ul>\n      <li>Store the custom files in a logical place (e.g. /App_Code/OMI/SyndicationImporter/, where OMI is an abbreviation for our client name Online Magazine Inc.).</li>\n      <li>Keep the code for accessing the service and performing the Kentico import separated.</li>\n      <li>Log descriptive events to the Kentico event log if errors occur.</li>\n    </ul>\n  </li>\n  <li>Consider using an API or abstraction layer to interface with the syndication service rather than directly writing a lot of custom code in the scheduled task.</li>\n</ul>\n<p><strong>Extensibility</strong></p>\n<ul>\n  <li>As additional syndication services may be added in the future, try to architect the scheduled task to accept parameters so that you can reuse the code rather than rewrite or copy the task code.</li>\n  <li>Consider trying to support configurable batch importing.</li>\n</ul>\n<p><strong>User experience</strong></p>\n<ul>\n  <li>Editors don't have to worry about the content as it is imported automatically, and the custom module provides them with appropriate access to review/manage the imported content.</li>\n  <li>Visitors see the syndicated content just like any other content.</li>\n</ul>\n<p><strong>Testing</strong></p>\n<ul>\n  <li>Consider using&nbsp;<a href=\"https://docs.xperience.io/custom-development/writing-automated-tests\">automated tests</a>&nbsp;to verify custom functionality automatically.</li>\n  <li>Verify that partial imports and aborted imports can be resumed.</li>\n  <li>Verify that an unavailable syndication service is handled gracefully.</li>\n  <li>Verify that duplicate content is not imported.</li>\n</ul>"},"title":{"value":"Automatically importing content"}}}]},"references":{"value":[{"__typename":"kontent_item_link","elements":{"title":{"value":"7 Key Concepts for Successful Development in Kentico"},"url":{"value":"https://www.youtube.com/watch?v=uf_OunojW-M&index=1&list=PL9RdJplq_ukamszWm4UMmHmtfsebzjXKB"}}},{"__typename":"kontent_item_link","elements":{"title":{"value":"KInspector"},"url":{"value":"https://github.com/Kentico/KInspector"}}},{"__typename":"kontent_item_link","elements":{"title":{"value":"Developing a Superfast Front End with Kentico"},"url":{"value":"https://www.youtube.com/watch?v=vIU2rCJWawk"}}},{"__typename":"kontent_item_link","elements":{"title":{"value":"Custom Development"},"url":{"value":"https://docs.xperience.io/custom-development"}}}]}}},"kontentItemNavigationItem":{"elements":{"child_items":{"value":[{"__typename":"kontent_item_navigation_item","elements":{"content_item":{"value":[{"__typename":"kontent_item_phase","system":{"id":"ad05c758-4c4a-4e28-a4f0-8d0438929ce5"},"elements":{"subphases":{"value":[{"__typename":"kontent_item_phase","system":{"id":"9195a378-f8ba-43ba-b527-28241d7630be"}},{"__typename":"kontent_item_phase","system":{"id":"767e65d5-6aac-47fc-8759-efec5f786ee6"}}]}}}]}}},{"__typename":"kontent_item_navigation_item","elements":{"content_item":{"value":[{"__typename":"kontent_item_phase","system":{"id":"7f52b669-8485-4de9-9ac0-5b0c4e3a2d7d"},"elements":{"subphases":{"value":[{"__typename":"kontent_item_phase","system":{"id":"01db3705-f9ba-4cb4-b3ab-341cbabff5a7"}},{"__typename":"kontent_item_phase","system":{"id":"c4901224-e559-4ecf-9ace-f2a88dcf21d8"}},{"__typename":"kontent_item_phase","system":{"id":"e7604240-5012-483f-a7c6-34498ee53b01"}}]}}}]}}},{"__typename":"kontent_item_navigation_item","elements":{"content_item":{"value":[{"__typename":"kontent_item_phase","system":{"id":"2eb6a258-635a-4c21-8739-841c01652f39"},"elements":{"subphases":{"value":[{"__typename":"kontent_item_phase","system":{"id":"2ca8b62a-e7e7-4603-bb18-ea3f576dce3d"}},{"__typename":"kontent_item_phase","system":{"id":"6e2d1894-f0d5-4b57-891f-a64bbbf72b83"}}]}}}]}}},{"__typename":"kontent_item_navigation_item","elements":{"content_item":{"value":[{"__typename":"kontent_item_phase","system":{"id":"ba524685-fe9e-4ccf-a0a2-c74e79c752f5"},"elements":{"subphases":{"value":[]}}}]}}},{"__typename":"kontent_item_navigation_item","elements":{"content_item":{"value":[{"__typename":"kontent_item_phase","system":{"id":"cdd91a89-a393-43c6-a855-d0d148a64cb5"},"elements":{"subphases":{"value":[]}}}]}}},{"__typename":"kontent_item_navigation_item","elements":{"content_item":{"value":[{"__typename":"kontent_item_phase","system":{"id":"2f435937-dd3f-45ca-9429-bbd24fa66480"},"elements":{"subphases":{"value":[]}}}]}}}]}}}},"pageContext":{"id":"89e7dab7-8a19-5236-a424-665c5a32cbd4","elements__url__value":"developing-implementing-best-practices","__params":{"elements__url__value":"developing-implementing-best-practices"}}},"staticQueryHashes":["2063601856","3035992785","433156892"]}