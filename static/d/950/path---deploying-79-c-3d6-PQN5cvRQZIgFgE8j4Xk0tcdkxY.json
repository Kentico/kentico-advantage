{"data":{"allKenticoCloudItemPhase":{"edges":[{"node":{"elements":{"title":{"value":"Deploying"},"url":{"value":"deploying"},"content":{"value":"<h2>Deployment approaches</h2>\n<p>The first part of deployment to consider is the deployment method. The approach you take depends on a number of factors such as the nature of the changes, project resources, team size, project type, as well as the source and target environments.<br>\n<br>\nThere are two basic approaches:&nbsp;<strong>manual</strong>&nbsp;and&nbsp;<strong>automatic&nbsp;</strong>deployment. In some scenarios you might&nbsp;<strong>combine&nbsp;</strong>these approaches and manually deploy a subset of the changes and automatically deploy the rest.</p>\n<ul>\n  <li>Manual deployment for code generally means copying files via FTP or over a network. For manual deployment of database changes, that means duplicating the changes manually or running SQL scripts manually.</li>\n  <li>Automated deployment of code can be done with build and deployment servers or services. Database changes may also be deployed this way, but may also be handled through built-in&nbsp;<a href=\"https://docs.kentico.com/k12/configuring-kentico/setting-up-web-farms\">web farm</a>&nbsp;features.</li>\n</ul>\n<p>Regardless of the deployment mechanism, you need to determine&nbsp;<strong>who&nbsp;</strong>will be responsible for deploying changes. This may be a certain person or group for one set of changes and a different group for another set of changes.<br>\n<br>\nAlternately, you might make a server or service responsible for it. If this is the case, assign someone to monitor that. Who is responsible might also depend on the target environment.<br>\n<br>\nFinally, the responsible party needs to know&nbsp;<strong>when&nbsp;</strong>to deploy. You might schedule a change for some maintenance window or push it immediately. Ideally, all of this is determined in advance and there are rules in place to prevent conflicts and ensure that if a deployment goes wrong, you know who to talk to.</p>\n<h2>Deployment tools</h2>\n<p>Kentico provides two means of deploying out of the box:</p>\n<ul>\n  <li>The content&nbsp;<a href=\"https://docs.kentico.com/k12/deploying-websites/content-staging\">staging</a>&nbsp;feature supports media files and&nbsp;<a href=\"https://docs.kentico.com/k12/deploying-websites/content-staging#Contentstaging-Whatcanbesynchronized\">certain database objects</a>, but not code files.</li>\n  <li>The&nbsp;<a href=\"https://docs.kentico.com/k12/deploying-websites/exporting-and-importing-sites\">export and import</a>&nbsp;feature supports media files and&nbsp;<a href=\"https://docs.kentico.com/k12/deploying-websites/exporting-and-importing-sites/export-folder-structure\">certain code files</a>&nbsp;(typically only suitable for web site projects) and&nbsp;<a href=\"https://docs.kentico.com/k12/deploying-websites/exporting-and-importing-sites/exporting-objects\">certain database objects</a>.</li>\n</ul>\n<p>There are lots of third party tools that can be helpful for deployment, such as&nbsp;<a href=\"http://www.bizstreamtoolkit.com/\">Compare for Kentico</a>, TeamCity, Web Deploy, Redgate SQL Compare, Octopus Deploy, and many others.<br>\n<br>\nThe following table provides a summary of tools you can use to synchronize code, media files and database objects.</p>\n<table><tbody>\n  <tr><td>Kentico feature</td><td>Media files</td><td>Code</td><td>Database objects</td></tr>\n  <tr><td>{.lightgray}<a href=\"https://docs.kentico.com/k12/deploying-websites/content-staging\">Content staging</a></td><td>{.green}Supported</td><td>{.red}Not supported</td><td>{.yellow}<a href=\"https://docs.kentico.com/k12/deploying-websites/content-staging#Contentstaging-Whatcanbesynchronized\">Certain objects</a></td></tr>\n  <tr><td>{.lightgray}<a href=\"https://docs.kentico.com/k12/deploying-websites/exporting-and-importing-sites\">Export / Import</a></td><td>{.green}Supported</td><td>{.yellow}<a href=\"https://docs.kentico.com/k12/deploying-websites/exporting-and-importing-sites/export-folder-structure\">Supported objects</a><br>\n<br>\nNote: Suitable only for the web site project.</td><td>{.yellow}<a href=\"https://docs.kentico.com/k12/deploying-websites/exporting-and-importing-sites/exporting-objects\">Certain objects</a><br>\n<br>\nNote: Not designed for incremental deployment of pages.</td></tr>\n</tbody></table>\n<table><tbody>\n  <tr><td>3rd party tools</td><td>Note</td></tr>\n  <tr><td>{.lightgray}e.g., TeamCity, FTP, WebDeploy,<br>\nVisual Studio, Redgate SQL Data Compare</td><td>{.yellow}Tool dependent<br>\n<br>\nNote: In case you work with a web site project type, you can deploy individual code files as opposed when you have a web application or pre-compiled web site where you need to deploy a whole project at once.</td></tr>\n</tbody></table>\n<h2>Deployment process</h2>\n<p>Before you start deploying to any environment, spend some time preparing to eliminate possible issues. The following list of tasks should help you understand the types of things to check:</p>\n<ul>\n  <li>Run&nbsp;<a href=\"https://github.com/Kentico/KInspector\">KInspector</a>&nbsp;and consider the displayed recommendations.</li>\n  <li>Disable features not in use to avoid consuming unnecessary resources (e.g., scheduled tasks, REST module).</li>\n  <li>Check your environment specific configuration (e.g. web.config, application settings).\n    <ul>\n      <li>Disable debug, enable caching, validate CDN settings, disable unnecessary logging (e.g., content staging), etc.</li>\n    </ul>\n  </li>\n  <li>Determine objects to synchronize.\n    <ul>\n      <li>Consider using&nbsp;<a href=\"http://www.bizstreamtoolkit.com/\">Compare for Kentico</a>&nbsp;to help identify differences between your Kentico instances in different environments.</li>\n      <li>Filter out or remove unwanted objects from deployment (e.g., do not select objects starting with \"test_\" prefix or objects stored in a \"test\" folder).</li>\n      <li>Validate that all dependencies are included.</li>\n    </ul>\n  </li>\n  <li>Prepare your deployment package(s).\n    <ul>\n      <li>Consider including&nbsp;<a href=\"https://docs.kentico.com/k12/deploying-websites/publishing-projects-from-visual-studio#PublishingprojectsfromVisualStudio-Precompilingwebsites\">precompilation</a>&nbsp;to improve the performance and reduce time to first page load after deployment.</li>\n    </ul>\n  </li>\n  <li>Test the deployment prior to synchronizing.\n    <ul>\n      <li>Be aware that the built-in deployment features do not support a bulk roll-back in case of failed deployment.</li>\n    </ul>\n  </li>\n  <li>Back up the target environment to provide a way to recover in the event of something going wrong.</li>\n  <li>Plan the order that things are synchronized in (e.g., code then database objects or vice-versa).\n    <ul>\n      <li>You want to deploy the code first in most of the cases.</li>\n    </ul>\n  </li>\n  <li>Prepare a maintenance message when deploying with a downtime (e.g., Kentico offline mode or App_Offline.html file).</li>\n</ul>\n<p>During the deployment, monitor the environment (e.g., CPU, RAM, and disk utilization), the application (e.g., event log errors), and take appropriate action when something goes amiss. After the deployment, verify and test that the deployment was successful.</p>","resolvedHtml":"<h2>Deployment approaches</h2>\n<p>The first part of deployment to consider is the deployment method. The approach you take depends on a number of factors such as the nature of the changes, project resources, team size, project type, as well as the source and target environments.<br>\n<br>\nThere are two basic approaches:&nbsp;<strong>manual</strong>&nbsp;and&nbsp;<strong>automatic&nbsp;</strong>deployment. In some scenarios you might&nbsp;<strong>combine&nbsp;</strong>these approaches and manually deploy a subset of the changes and automatically deploy the rest.</p>\n<ul>\n  <li>Manual deployment for code generally means copying files via FTP or over a network. For manual deployment of database changes, that means duplicating the changes manually or running SQL scripts manually.</li>\n  <li>Automated deployment of code can be done with build and deployment servers or services. Database changes may also be deployed this way, but may also be handled through built-in&nbsp;<a href=\"https://docs.kentico.com/k12/configuring-kentico/setting-up-web-farms\">web farm</a>&nbsp;features.</li>\n</ul>\n<p>Regardless of the deployment mechanism, you need to determine&nbsp;<strong>who&nbsp;</strong>will be responsible for deploying changes. This may be a certain person or group for one set of changes and a different group for another set of changes.<br>\n<br>\nAlternately, you might make a server or service responsible for it. If this is the case, assign someone to monitor that. Who is responsible might also depend on the target environment.<br>\n<br>\nFinally, the responsible party needs to know&nbsp;<strong>when&nbsp;</strong>to deploy. You might schedule a change for some maintenance window or push it immediately. Ideally, all of this is determined in advance and there are rules in place to prevent conflicts and ensure that if a deployment goes wrong, you know who to talk to.</p>\n<h2>Deployment tools</h2>\n<p>Kentico provides two means of deploying out of the box:</p>\n<ul>\n  <li>The content&nbsp;<a href=\"https://docs.kentico.com/k12/deploying-websites/content-staging\">staging</a>&nbsp;feature supports media files and&nbsp;<a href=\"https://docs.kentico.com/k12/deploying-websites/content-staging#Contentstaging-Whatcanbesynchronized\">certain database objects</a>, but not code files.</li>\n  <li>The&nbsp;<a href=\"https://docs.kentico.com/k12/deploying-websites/exporting-and-importing-sites\">export and import</a>&nbsp;feature supports media files and&nbsp;<a href=\"https://docs.kentico.com/k12/deploying-websites/exporting-and-importing-sites/export-folder-structure\">certain code files</a>&nbsp;(typically only suitable for web site projects) and&nbsp;<a href=\"https://docs.kentico.com/k12/deploying-websites/exporting-and-importing-sites/exporting-objects\">certain database objects</a>.</li>\n</ul>\n<p>There are lots of third party tools that can be helpful for deployment, such as&nbsp;<a href=\"http://www.bizstreamtoolkit.com/\">Compare for Kentico</a>, TeamCity, Web Deploy, Redgate SQL Compare, Octopus Deploy, and many others.<br>\n<br>\nThe following table provides a summary of tools you can use to synchronize code, media files and database objects.</p>\n<table><tbody>\n  <tr><td>Kentico feature</td><td>Media files</td><td>Code</td><td>Database objects</td></tr>\n  <tr><td>{.lightgray}<a href=\"https://docs.kentico.com/k12/deploying-websites/content-staging\">Content staging</a></td><td>{.green}Supported</td><td>{.red}Not supported</td><td>{.yellow}<a href=\"https://docs.kentico.com/k12/deploying-websites/content-staging#Contentstaging-Whatcanbesynchronized\">Certain objects</a></td></tr>\n  <tr><td>{.lightgray}<a href=\"https://docs.kentico.com/k12/deploying-websites/exporting-and-importing-sites\">Export / Import</a></td><td>{.green}Supported</td><td>{.yellow}<a href=\"https://docs.kentico.com/k12/deploying-websites/exporting-and-importing-sites/export-folder-structure\">Supported objects</a><br>\n<br>\nNote: Suitable only for the web site project.</td><td>{.yellow}<a href=\"https://docs.kentico.com/k12/deploying-websites/exporting-and-importing-sites/exporting-objects\">Certain objects</a><br>\n<br>\nNote: Not designed for incremental deployment of pages.</td></tr>\n</tbody></table>\n<table><tbody>\n  <tr><td>3rd party tools</td><td>Note</td></tr>\n  <tr><td>{.lightgray}e.g., TeamCity, FTP, WebDeploy,<br>\nVisual Studio, Redgate SQL Data Compare</td><td>{.yellow}Tool dependent<br>\n<br>\nNote: In case you work with a web site project type, you can deploy individual code files as opposed when you have a web application or pre-compiled web site where you need to deploy a whole project at once.</td></tr>\n</tbody></table>\n<h2>Deployment process</h2>\n<p>Before you start deploying to any environment, spend some time preparing to eliminate possible issues. The following list of tasks should help you understand the types of things to check:</p>\n<ul>\n  <li>Run&nbsp;<a href=\"https://github.com/Kentico/KInspector\">KInspector</a>&nbsp;and consider the displayed recommendations.</li>\n  <li>Disable features not in use to avoid consuming unnecessary resources (e.g., scheduled tasks, REST module).</li>\n  <li>Check your environment specific configuration (e.g. web.config, application settings).\n    <ul>\n      <li>Disable debug, enable caching, validate CDN settings, disable unnecessary logging (e.g., content staging), etc.</li>\n    </ul>\n  </li>\n  <li>Determine objects to synchronize.\n    <ul>\n      <li>Consider using&nbsp;<a href=\"http://www.bizstreamtoolkit.com/\">Compare for Kentico</a>&nbsp;to help identify differences between your Kentico instances in different environments.</li>\n      <li>Filter out or remove unwanted objects from deployment (e.g., do not select objects starting with \"test_\" prefix or objects stored in a \"test\" folder).</li>\n      <li>Validate that all dependencies are included.</li>\n    </ul>\n  </li>\n  <li>Prepare your deployment package(s).\n    <ul>\n      <li>Consider including&nbsp;<a href=\"https://docs.kentico.com/k12/deploying-websites/publishing-projects-from-visual-studio#PublishingprojectsfromVisualStudio-Precompilingwebsites\">precompilation</a>&nbsp;to improve the performance and reduce time to first page load after deployment.</li>\n    </ul>\n  </li>\n  <li>Test the deployment prior to synchronizing.\n    <ul>\n      <li>Be aware that the built-in deployment features do not support a bulk roll-back in case of failed deployment.</li>\n    </ul>\n  </li>\n  <li>Back up the target environment to provide a way to recover in the event of something going wrong.</li>\n  <li>Plan the order that things are synchronized in (e.g., code then database objects or vice-versa).\n    <ul>\n      <li>You want to deploy the code first in most of the cases.</li>\n    </ul>\n  </li>\n  <li>Prepare a maintenance message when deploying with a downtime (e.g., Kentico offline mode or App_Offline.html file).</li>\n</ul>\n<p>During the deployment, monitor the environment (e.g., CPU, RAM, and disk utilization), the application (e.g., event log errors), and take appropriate action when something goes amiss. After the deployment, verify and test that the deployment was successful.</p>"},"overview":{"value":"<p><strong>Release </strong>the initial build into production or incrementally update an existing project.</p>"},"teaser":{"value":"<p>Deployment is one of the most crucial steps in a project's lifecycle. You will deploy continuously throughout the life of a project. Most think about deployment in terms of production, but it also includes local, integration, staging, and testing environments. This section provides an overview of the process of deploying your solution from one environment to another and includes the basic approaches, available tools, and steps to deploy.</p>"},"icon":{"assets":[{"url":"https://assets-us-01.kc-usercontent.com:443/c1b57fce-743a-0048-c4ee-4f8c42ea3ab8/c8d74e8f-deb6-4643-bf2b-4e0734d51e7c/icon-deploying.svg"}]},"background":{"options":[{"codename":"gray"}]},"scenarios":[{"system":{"id":"3690fcae-c89c-4cfc-be70-5a3d1be06a34"},"elements":{"title":{"value":"Adding a new section to the site"},"detail":{"value":"<p>A partner added a new section to a client's website for the latest product updates. The changes included some new page types, a couple of new templates, and some CSS changes.<br>\n<br>\nAs the client had a DTAP (Development, Testing, Acceptance, and Production) environment configuration, the partner created these items and some test pages in the development. Once they were ready, they used Kentico's continuous integration feature to push the changes and test content to the testing environment via TeamCity with an automated build.<br>\n<br>\nAfter testing the changes and confirming that they were ready to deploy, they used the staging feature to deploy the changes to the acceptance server. Because they didn't want the testing data getting pushed into the acceptance environment and because staging tasks are not created with a CI restore for pages, only the page types, page templates, and CSS changes were staged to the acceptance environment.<br>\n<br>\nSince there were other items already in testing, the developers were very careful to select the specific staging tasks that were related to their changes for the new section. With these changes deployed to acceptance, the content editors were given training on where and how to add this content and once the initial pages were ready to deploy, the changes and content were carefully staged to production.</p>"}}},{"system":{"id":"5539efb0-37c9-48c5-b65b-a5094a1934a3"},"elements":{"title":{"value":"Deploying to multi-tenant environment"},"detail":{"value":"<p>A client was deploying a new company branding web site into an environment with multiple web sites hosted by one Kentico installation.</p>\n<p>They decided that the easiest way to deploy the web site from development to staging and later to production environment was to use export/import module, which allowed them to bring code, media files, content and other objects all at once. They were careful to select only the necessary items to export in order to avoid overriding global settings or objects in the shared Kentico instance.</p>\n<p>After the web site was deployed initially, the client used the content staging module as the main tool for pushing updates. With this approach, they were able to synchronize ongoing content, media and object changes.</p>\n<p>Since the client was using mostly out of the box functionality, they deployed the occasional code change manually to all of the environments through Visual Studio's publish functionality.</p>"}}},{"system":{"id":"efd62318-6050-41d7-adb6-cf41a1eacbb2"},"elements":{"title":{"value":"Going live with a redesigned web site"},"detail":{"value":"<p>A client was going live with a new redesign of their old website, which previously ran on a different platform.</p>\n<p>Since the web site with all of its content and functionality was completed and tested in the staging environment, the easiest way to deploy this new web site to production was to manually backup and restore the site files and database.</p>\n<p>Both the solution code base and database were fully restored in the production environment without any built-in or external deployment tools. Environment specific settings and configuration were adjusted to match the production environment requirements. The system administrator prepared a backup plan to easily switch traffic between the old website and the new website running in the same environment in case there were any issues.</p>\n<p>The client decided to forward the traffic to the new web site early on Saturday morning to minimize the impact on users and ensured that the whole implementation team was ready to address any issues should they arise.</p>\n<p>After going live, the system administrator received an email notification from Kentico about a few errors in the event log. These were quickly addressed as they turned out to be configuration changes that were initially overlooked.</p>"}}},{"system":{"id":"cf4a047a-b60b-4f76-afbe-c61680bed8eb"},"elements":{"title":{"value":"Rolling out a new feature"},"detail":{"value":"<p>A client was planning to deploy a new feature that involved changing some of the existing code as well as the data in the database.</p>\n<p>This new functionality was highly dependent on both the code and the data. It was crucial to have both in place at the same time, and therefore, a maintenance window with downtime was required.</p>\n<p>The deployment process was tested with a copy of the production environment to ensure that nothing would break other web site functionality. They scheduled the production deployment early on a Sunday morning as, based on the Google Analytics, this was their lowest traffic time. During this time, all live site visitor requests were redirected to a page with maintenance message explaining that the website was being updated.</p>\n<p>Since the production environment contained visitor generated data (e.g., form submission, web analytics, online marketing data, etc.), the customer was not able to use a full backup and restore approach for this scenario. They used TeamCity to&nbsp;deploy the code to production and after that, used Kentico built-in content staging to synchronize the necessary database data.</p>\n<p>Once they verified everything was working correctly in the production environment, they redirected live traffic back to the site again.</p>"}}},{"system":{"id":"3803594a-e4e7-4be5-8db9-90e1ca49eb65"},"elements":{"title":{"value":"Applying hotfix with no downtime"},"detail":{"value":"<p>A client had a strict requirement to keep the production web site running even during maintenance windows.</p>\n<p>They needed to apply the latest Kentico hotfix, so they took a backup of the production web site (both the database and code base) and applied the hotfix in a local development environment. After testing the web site, they restored it to another server in the production environment.</p>\n<p>Once the hotfixed web site&nbsp;was warmed up, they redirected&nbsp;the traffic to it instead of the old server through a load balancer. During the maintenance window, they disabled visitor submission of forms via a customization they built to put forms in a read-only mode and displayed a maintenance message in order to avoid having to migrate the data to the hotfixed web site.</p>"}}}],"references":[]},"system":{"id":"cdd91a89-a393-43c6-a855-d0d148a64cb5"}}}]},"allKenticoCloudItemNavigationItem":{"edges":[{"node":{"elements":{"child_items":[{"elements":{"content_item":[{"system":{"id":"ad05c758-4c4a-4e28-a4f0-8d0438929ce5"},"elements":{"subphases":[{"system":{"id":"9195a378-f8ba-43ba-b527-28241d7630be"}},{"system":{"id":"767e65d5-6aac-47fc-8759-efec5f786ee6"}}]}}]}},{"elements":{"content_item":[{"system":{"id":"7f52b669-8485-4de9-9ac0-5b0c4e3a2d7d"},"elements":{"subphases":[{"system":{"id":"01db3705-f9ba-4cb4-b3ab-341cbabff5a7"}},{"system":{"id":"1d9b8e3c-2568-4242-835f-205e6b44c9d9"}},{"system":{"id":"c4901224-e559-4ecf-9ace-f2a88dcf21d8"}},{"system":{"id":"e7604240-5012-483f-a7c6-34498ee53b01"}}]}}]}},{"elements":{"content_item":[{"system":{"id":"2eb6a258-635a-4c21-8739-841c01652f39"},"elements":{"subphases":[{"system":{"id":"2ca8b62a-e7e7-4603-bb18-ea3f576dce3d"}},{"system":{"id":"6e2d1894-f0d5-4b57-891f-a64bbbf72b83"}}]}}]}},{"elements":{"content_item":[{"system":{"id":"ba524685-fe9e-4ccf-a0a2-c74e79c752f5"},"elements":{"subphases":[]}}]}},{"elements":{"content_item":[{"system":{"id":"cdd91a89-a393-43c6-a855-d0d148a64cb5"},"elements":{"subphases":[]}}]}},{"elements":{"content_item":[{"system":{"id":"2f435937-dd3f-45ca-9429-bbd24fa66480"},"elements":{"subphases":[]}}]}}]}}}]}},"pageContext":{"id":"cdd91a89-a393-43c6-a855-d0d148a64cb5"}}