{"data":{"allKenticoCloudItemPhase":{"edges":[{"node":{"elements":{"title":{"value":"Implementing best practices"},"url":{"value":"implementing-best-practices"},"content":{"value":"<h2>Security</h2>\n<p>There are two sides to security. The first is related to properly configuring access to content and functionality for authorized users.<br>\n<br>\nThe second is making sure that hackers are not able to exploit flaws in the implementation to gain unauthorized access to content and functionality.<br>\n<br>\nWhen it comes to Kentico, you need to consider the following:</p>\n<ul>\n  <li>User permissions and access control lists (ACLs)</li>\n  <li>Proper configuration of web parts</li>\n  <li>Sanitization of user input to SQL injections and cross site scripting attacks</li>\n  <li>Secure data storage/transfer</li>\n</ul>\n<p>Kentico administration UI, out of box controls, and APIs make it easy for you to secure your application by providing an easy to use UI, some automatic protections, and tools to make sure you are able to easily secure your code.</p>\n<h2>Performance</h2>\n<p>Many times, developers primarily focus on just making sure what they build is functional. This can lead to scalability issues, higher running costs, or even dissatisfied users.<br>\n<br>\nKentico does a lot of optimization automatically, and provides lots of ways to get better performance out of your project with features like:</p>\n<ul>\n  <li>Web part output can be cached with&nbsp;<a href=\"https://docs.kentico.com/k10/configuring-kentico/optimizing-website-performance/configuring-caching/caching-page-output#Cachingpageoutput-Cachingportionsofthepageoutput\">partial cache</a>.</li>\n  <li>Data can be cached separately from output and shared across the system with&nbsp;<a href=\"https://docs.kentico.com/k10/configuring-kentico/optimizing-website-performance/configuring-caching/caching-the-data-of-page-components\">content cache</a>.</li>\n  <li>Extensive caching APIs that allow for complex dependencies.</li>\n  <li><a href=\"https://docs.kentico.com/k10/configuring-kentico/optimizing-website-performance/configuring-caching/caching-page-output\">Output caching</a>&nbsp;can be configured on a page-by-page basis.</li>\n  <li>APIs that can be fine tuned to retrieve only the necessary data.</li>\n  <li>Built in&nbsp;<a href=\"https://docs.kentico.com/k10/developing-websites/troubleshooting-websites/debugging\">debugging</a>&nbsp;tools allow easy access and visibility into the inner workings of the system.</li>\n</ul>\n<p>It's important to note that while Kentico does a lot of things automatically, it can be very easy to introduce performance issues. Here are a few practices to keep in mind as you develop:</p>\n<ul>\n  <li>Introduce as few (ideally zero) SQL queries as possible.</li>\n  <li>Make sure that you have a&nbsp;<a href=\"https://docs.kentico.com/k10/configuring-kentico/optimizing-website-performance/configuring-caching/caching-best-practices-for-typical-projects\">caching strategy</a>&nbsp;and that it is working.</li>\n  <li>Review the performance of your custom code using the debugging tools in the administration interface.</li>\n  <li>Review how the project is configured, as some options like analytics and online marketing features can add some overhead to requests (only enable what you need).</li>\n  <li>Consider first page load time as well as primed cache load time.</li>\n  <li>Consider integrating third-party tools to gain further improvements such as&nbsp;<a href=\"http://devnet.kentico.com/articles/html-minification-with-webmarkupmin\">minifying your HTML with WebMarkupMin</a>.&nbsp;</li>\n</ul>\n<h2>Dependencies</h2>\n<p>When building something new, you need to consider what it depends on (data structures, third party APIs, etc.) and what will depend on it (templates, custom modules, etc.).<br>\n<br>\nIt is important to plan how what you are building will interact with its dependencies in order to avoid re-work or extra effort. This is also important when considering how to deploy new features/functionality down the line.<br>\n<br>\nSome examples of dependencies to think about in Kentico include:</p>\n<ul>\n  <li>Page types and content needed before being able to build a template.</li>\n  <li><a href=\"https://docs.kentico.com/k10/configuring-kentico/optimizing-website-performance/configuring-caching/setting-cache-dependencies\">Cache dependencies</a>&nbsp;being configured properly.</li>\n  <li>Code files and resource strings for a custom module class needed before developing module UI.</li>\n  <li>Third party libraries must be available in .NET or as a web API before you can interact with them inside a Kentico project.</li>\n  <li>Relationships between custom built features must be understood.</li>\n</ul>\n<h2>Maintainability</h2>\n<p>Whether the project will be maintained by the same team or not, implementations should be created with future maintenance in mind.<br>\n<br>\nIf something is built sloppily the first time, maintenance can easily be exponentially more costly. It is important to consider every aspect of what you are developing when it comes to maintainability.<br>\n<br>\nFor example, you will want to pay attention to some of the following things in Kentico:</p>\n<ul>\n  <li>For web parts, use short control IDs with descriptive titles that identify the purpose and control ID (e.g. control Id: \"MN\", Title: \"Main Navigation&nbsp;[MN]\").</li>\n  <li>Name code files appropriately (e.g. use the class name of the class contained in the file).</li>\n  <li>Store code files in an appropriate location in sub-directories identifying it as custom for the project and based on the namespace (e.g. /CMSWebParts/MCP/ProductConfigurator.ascx(.cs), where MCP is an abbreviation for \"Modular Construction Products\", the site name).</li>\n  <li>Use Kentico's logging APIs to log success/failure/warning/information appropriately.</li>\n  <li>Consider refactoring large methods and using abstraction layers to make code readable and reusable.</li>\n  <li>Use built-in extensibility points such as&nbsp;<a href=\"https://docs.kentico.com/k10/custom-development/handling-global-events\">global events</a>&nbsp;or&nbsp;<a href=\"https://docs.kentico.com/k10/custom-development/customizing-providers\">providers</a>.</li>\n  <li>Use an appropriate naming convention to avoid collisions with system objects, especially during upgrades/hotfixes (e.g. prefix things with an abbreviated version of the site/project name).</li>\n</ul>\n<h2>User experience</h2>\n<p>This applies to both editors and visitors. Your solutions should be built with ease of use in mind. Your editors will have an easier time keeping the site up to date, and your visitors will be more engaged.<br>\n<br>\nSome examples of how you can create a good experience for editors and visitors are:</p>\n<ul>\n  <li>Utilize widgets rather than web parts for personalization and/or AB testing to allow your editors to manage this themselves.</li>\n  <li>Build integrations that require simple interaction or are automatically run.</li>\n  <li>Utilize custom modules to extend the system in a complex way while maintaining a consistent and easy to use user interface for editors.</li>\n  <li>Don't require more information than necessary from visitors.</li>\n  <li>Provide visitors with a customized experience based on their history or context.</li>\n  <li>Make it easy for visitors to fall into the pit of success.</li>\n  <li>Consider page load times for visitors (the faster the better).</li>\n</ul>\n<h2>Extensibility</h2>\n<p>Projects are very rarely built once and never extended. Thinking about how a feature might need to be enhanced&nbsp;in the future can help save effort and time in the future.<br>\n<br>\nHowever, do bear in mind that there is a need to balance the effort/time with the project's budget/timeline. Be sure to think about:</p>\n<ul>\n  <li>Consider how data will grow and change in the future.</li>\n  <li>Think about future integrations or features that need to be added.</li>\n</ul>\n<p>Consider building on Kentico built in extensibility points to help with this process:</p>\n<ul>\n  <li>The portal engine enables rapid development and flexibility.</li>\n  <li>Use custom modules.</li>\n  <li>Investigate event handlers.</li>\n  <li>Look for&nbsp;<a href=\"https://docs.kentico.com/k10/custom-development/customizing-providers\">providers</a>&nbsp;to override/extend.</li>\n</ul>\n<h2>Testing</h2>\n<p>You should always verify that what you've built functions as intended. This includes negative testing to make sure that unintended behavior is guarded against. More details on this can be found in the&nbsp;<a href=\"https://kentico-advantage.azurewebsites.net/developing/~/testing\">Testing</a>&nbsp;section.</p>"}},"system":{"id":"6e2d1894-f0d5-4b57-891f-a64bbbf72b83"}}}]}},"pageContext":{"id":"6e2d1894-f0d5-4b57-891f-a64bbbf72b83","title":"Implementing best practices","content":"<h2>Security</h2>\n<p>There are two sides to security. The first is related to properly configuring access to content and functionality for authorized users.<br>\n<br>\nThe second is making sure that hackers are not able to exploit flaws in the implementation to gain unauthorized access to content and functionality.<br>\n<br>\nWhen it comes to Kentico, you need to consider the following:</p>\n<ul>\n  <li>User permissions and access control lists (ACLs)</li>\n  <li>Proper configuration of web parts</li>\n  <li>Sanitization of user input to SQL injections and cross site scripting attacks</li>\n  <li>Secure data storage/transfer</li>\n</ul>\n<p>Kentico administration UI, out of box controls, and APIs make it easy for you to secure your application by providing an easy to use UI, some automatic protections, and tools to make sure you are able to easily secure your code.</p>\n<h2>Performance</h2>\n<p>Many times, developers primarily focus on just making sure what they build is functional. This can lead to scalability issues, higher running costs, or even dissatisfied users.<br>\n<br>\nKentico does a lot of optimization automatically, and provides lots of ways to get better performance out of your project with features like:</p>\n<ul>\n  <li>Web part output can be cached with&nbsp;<a href=\"https://docs.kentico.com/k10/configuring-kentico/optimizing-website-performance/configuring-caching/caching-page-output#Cachingpageoutput-Cachingportionsofthepageoutput\">partial cache</a>.</li>\n  <li>Data can be cached separately from output and shared across the system with&nbsp;<a href=\"https://docs.kentico.com/k10/configuring-kentico/optimizing-website-performance/configuring-caching/caching-the-data-of-page-components\">content cache</a>.</li>\n  <li>Extensive caching APIs that allow for complex dependencies.</li>\n  <li><a href=\"https://docs.kentico.com/k10/configuring-kentico/optimizing-website-performance/configuring-caching/caching-page-output\">Output caching</a>&nbsp;can be configured on a page-by-page basis.</li>\n  <li>APIs that can be fine tuned to retrieve only the necessary data.</li>\n  <li>Built in&nbsp;<a href=\"https://docs.kentico.com/k10/developing-websites/troubleshooting-websites/debugging\">debugging</a>&nbsp;tools allow easy access and visibility into the inner workings of the system.</li>\n</ul>\n<p>It's important to note that while Kentico does a lot of things automatically, it can be very easy to introduce performance issues. Here are a few practices to keep in mind as you develop:</p>\n<ul>\n  <li>Introduce as few (ideally zero) SQL queries as possible.</li>\n  <li>Make sure that you have a&nbsp;<a href=\"https://docs.kentico.com/k10/configuring-kentico/optimizing-website-performance/configuring-caching/caching-best-practices-for-typical-projects\">caching strategy</a>&nbsp;and that it is working.</li>\n  <li>Review the performance of your custom code using the debugging tools in the administration interface.</li>\n  <li>Review how the project is configured, as some options like analytics and online marketing features can add some overhead to requests (only enable what you need).</li>\n  <li>Consider first page load time as well as primed cache load time.</li>\n  <li>Consider integrating third-party tools to gain further improvements such as&nbsp;<a href=\"http://devnet.kentico.com/articles/html-minification-with-webmarkupmin\">minifying your HTML with WebMarkupMin</a>.&nbsp;</li>\n</ul>\n<h2>Dependencies</h2>\n<p>When building something new, you need to consider what it depends on (data structures, third party APIs, etc.) and what will depend on it (templates, custom modules, etc.).<br>\n<br>\nIt is important to plan how what you are building will interact with its dependencies in order to avoid re-work or extra effort. This is also important when considering how to deploy new features/functionality down the line.<br>\n<br>\nSome examples of dependencies to think about in Kentico include:</p>\n<ul>\n  <li>Page types and content needed before being able to build a template.</li>\n  <li><a href=\"https://docs.kentico.com/k10/configuring-kentico/optimizing-website-performance/configuring-caching/setting-cache-dependencies\">Cache dependencies</a>&nbsp;being configured properly.</li>\n  <li>Code files and resource strings for a custom module class needed before developing module UI.</li>\n  <li>Third party libraries must be available in .NET or as a web API before you can interact with them inside a Kentico project.</li>\n  <li>Relationships between custom built features must be understood.</li>\n</ul>\n<h2>Maintainability</h2>\n<p>Whether the project will be maintained by the same team or not, implementations should be created with future maintenance in mind.<br>\n<br>\nIf something is built sloppily the first time, maintenance can easily be exponentially more costly. It is important to consider every aspect of what you are developing when it comes to maintainability.<br>\n<br>\nFor example, you will want to pay attention to some of the following things in Kentico:</p>\n<ul>\n  <li>For web parts, use short control IDs with descriptive titles that identify the purpose and control ID (e.g. control Id: \"MN\", Title: \"Main Navigation&nbsp;[MN]\").</li>\n  <li>Name code files appropriately (e.g. use the class name of the class contained in the file).</li>\n  <li>Store code files in an appropriate location in sub-directories identifying it as custom for the project and based on the namespace (e.g. /CMSWebParts/MCP/ProductConfigurator.ascx(.cs), where MCP is an abbreviation for \"Modular Construction Products\", the site name).</li>\n  <li>Use Kentico's logging APIs to log success/failure/warning/information appropriately.</li>\n  <li>Consider refactoring large methods and using abstraction layers to make code readable and reusable.</li>\n  <li>Use built-in extensibility points such as&nbsp;<a href=\"https://docs.kentico.com/k10/custom-development/handling-global-events\">global events</a>&nbsp;or&nbsp;<a href=\"https://docs.kentico.com/k10/custom-development/customizing-providers\">providers</a>.</li>\n  <li>Use an appropriate naming convention to avoid collisions with system objects, especially during upgrades/hotfixes (e.g. prefix things with an abbreviated version of the site/project name).</li>\n</ul>\n<h2>User experience</h2>\n<p>This applies to both editors and visitors. Your solutions should be built with ease of use in mind. Your editors will have an easier time keeping the site up to date, and your visitors will be more engaged.<br>\n<br>\nSome examples of how you can create a good experience for editors and visitors are:</p>\n<ul>\n  <li>Utilize widgets rather than web parts for personalization and/or AB testing to allow your editors to manage this themselves.</li>\n  <li>Build integrations that require simple interaction or are automatically run.</li>\n  <li>Utilize custom modules to extend the system in a complex way while maintaining a consistent and easy to use user interface for editors.</li>\n  <li>Don't require more information than necessary from visitors.</li>\n  <li>Provide visitors with a customized experience based on their history or context.</li>\n  <li>Make it easy for visitors to fall into the pit of success.</li>\n  <li>Consider page load times for visitors (the faster the better).</li>\n</ul>\n<h2>Extensibility</h2>\n<p>Projects are very rarely built once and never extended. Thinking about how a feature might need to be enhanced&nbsp;in the future can help save effort and time in the future.<br>\n<br>\nHowever, do bear in mind that there is a need to balance the effort/time with the project's budget/timeline. Be sure to think about:</p>\n<ul>\n  <li>Consider how data will grow and change in the future.</li>\n  <li>Think about future integrations or features that need to be added.</li>\n</ul>\n<p>Consider building on Kentico built in extensibility points to help with this process:</p>\n<ul>\n  <li>The portal engine enables rapid development and flexibility.</li>\n  <li>Use custom modules.</li>\n  <li>Investigate event handlers.</li>\n  <li>Look for&nbsp;<a href=\"https://docs.kentico.com/k10/custom-development/customizing-providers\">providers</a>&nbsp;to override/extend.</li>\n</ul>\n<h2>Testing</h2>\n<p>You should always verify that what you've built functions as intended. This includes negative testing to make sure that unintended behavior is guarded against. More details on this can be found in the&nbsp;<a href=\"https://kentico-advantage.azurewebsites.net/developing/~/testing\">Testing</a>&nbsp;section.</p>"}}