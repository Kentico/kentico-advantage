{"data":{"allKenticoCloudItemPhase":{"edges":[{"node":{"elements":{"title":{"value":"Developing in a team"},"url":{"value":"developing-in-a-team"},"content":{"value":"<h2>Centralized development approach</h2>\n<p>With this approach, each developer has a local copy of the code, which is synchronized via source control and uses a single shared database. Developers also use shared media library storage to keep media assets synchronized. There is a&nbsp;<a href=\"https://docs.kentico.com/k10/developing-websites/preparing-your-environment-for-team-development/setting-up-continuous-integration\">continuous integration</a>&nbsp;server (CIS) that monitors changes in source control. When changes are detected, CIS builds and deploys code to an integrated testing environment.<br>\n<br>\nIn this scenario, manual merges may be necessary in the event of conflicts in the code. Additionally, you must implement several techniques such as&nbsp;<a href=\"https://docs.kentico.com/k10/developing-websites/preparing-your-environment-for-team-development/working-with-object-locking\">object locking</a>&nbsp;and&nbsp;<a href=\"https://docs.kentico.com/k10/configuring-kentico/working-with-object-versioning\">object versioning</a>&nbsp;to avoid database conflicts and data loss.<br>\n<br>\nThe testing environment is also connected to the shared development database and media library storage and is used for functionality previewing and testing.</p>\n<h3>Pros</h3>\n<ul>\n  <li>All settings, content, etc. in the database are the same for all developers.</li>\n  <li>Only one database server is needed with only one copy of the database (lower resource requirements).</li>\n  <li>Relatively simple to configure and maintain.</li>\n</ul>\n<h3>Cons</h3>\n<ul>\n  <li><a href=\"https://docs.kentico.com/k10/configuring-kentico/optimizing-website-performance/setting-up-web-farms\">Web farm</a>&nbsp;must be configured (and licensed) in order for caches to be invalidated properly in all environments.\n    <ul>\n      <li>This can be mitigated by using check in/out (locking) and versioning features for objects and content.</li>\n    </ul>\n  </li>\n  <li>Database references to local files can be out of sync. For example, a new web part added to the home page that hasn't been promoted to all environments yet would cause errors for environments that don't have the web part yet.</li>\n</ul>\n<figure data-asset-id=\"717735b3-6aca-42b0-a2fd-f9f35223efd4\" data-image-id=\"717735b3-6aca-42b0-a2fd-f9f35223efd4\"><img src=\"https://assets-us-01.kc-usercontent.com:443/c1b57fce-743a-0048-c4ee-4f8c42ea3ab8/0c6fb937-0e47-479f-887e-522484201b10/dev-shared-db.svg\" data-asset-id=\"717735b3-6aca-42b0-a2fd-f9f35223efd4\" data-image-id=\"717735b3-6aca-42b0-a2fd-f9f35223efd4\" alt=\"\"></figure>\n<h2>Distributed development approach</h2>\n<p>In this approach, all developers have a local copy of the code, which is synchronized via source control and their own copy of the database. Database changes are synchronized via&nbsp;<a href=\"https://docs.kentico.com/k10/developing-websites/preparing-your-environment-for-team-development/setting-up-continuous-integration\">continuous integration</a>&nbsp;feature. There is a continuous integration server (CIS) that monitors changes in source control. When changes are detected, CIS build and deploys code to a testing environment.<br>\n<br>\nIn this scenario, manual merges may be necessary in the event of conflicts for both code and database changes.<br>\n<br>\nThe testing environment also has its own copy of the database and is used for functionality previewing and testing.</p>\n<h3>Pros</h3>\n<ul>\n  <li>Developers have a completely separate environment and can safely experiment with things without affecting other developers.</li>\n  <li>Database changes are tracked in source control and require merging (usually automatic).</li>\n  <li>Allows for portal engine templates to be managed in source control.</li>\n  <li>Allows for deployments of code and SQL changes simultaneously.</li>\n</ul>\n<h3>Cons</h3>\n<ul>\n  <li>Database changes can result in complex merge conflicts.</li>\n  <li>Developers do not have access to real time updates to the data across environments.</li>\n  <li>Not all Kentico objects are supported, so please check the&nbsp;<a href=\"https://docs.kentico.com/k10/developing-websites/preparing-your-environment-for-team-development/setting-up-continuous-integration/object-types-supported-by-continuous-integration\">documentation</a>.</li>\n</ul>\n<figure data-asset-id=\"c0164a83-837d-41a7-9651-c28ad4b300c2\" data-image-id=\"c0164a83-837d-41a7-9651-c28ad4b300c2\"><img src=\"https://assets-us-01.kc-usercontent.com:443/c1b57fce-743a-0048-c4ee-4f8c42ea3ab8/ec79c06c-c5f3-4c5e-ab0d-fd67fa5e40c4/dev-ci.svg\" data-asset-id=\"c0164a83-837d-41a7-9651-c28ad4b300c2\" data-image-id=\"c0164a83-837d-41a7-9651-c28ad4b300c2\" alt=\"\"></figure>\n<h2>Using source control</h2>\n<p>Regardless of the approach you take, you should use some form of source control to keep track of changes in the project and facilitate automated builds and even deployments.<br>\n<br>\nThere are a multitude of options for handling this, but probably the most common is to use Git.&nbsp;To help you get started with Git and Kentico projects, we've created a few articles to help you get your project into source control and doing automated deployments:</p>\n<ul>\n  <li><a href=\"http://devnet.kentico.com/articles/storing-web-configs-in-source-control-safely\">Storing web.configs in source control safely</a></li>\n  <li><a href=\"http://devnet.kentico.com/articles/gitignore-for-kentico\">Gitignore for Kentico</a></li>\n  <li><a href=\"http://devnet.kentico.com/articles/automating-kentico-continuous-integration-with-teamcity-and-github\">Automating Kentico Continuous Integration with TeamCity and GitHub</a></li>\n</ul>\n<h2>Deploying</h2>\n<p>Deploying from a development environment into another environment for testing or production uses is a large topic on its own. This section deals primarily with how to configure your development environment, but we have prepared a whole section on&nbsp;<a href=\"https://kentico-advantage.azurewebsites.net/developing/~/deploying\">deploying</a>.</p>"},"overview":{"value":"<p>Set your team up for success by figuring out how your team will manage changes and work together before diving in.</p>"},"icon":{"assets":[]}},"system":{"id":"2ca8b62a-e7e7-4603-bb18-ea3f576dce3d"}}}]}},"pageContext":{"id":"2ca8b62a-e7e7-4603-bb18-ea3f576dce3d","title":"Developing in a team","content":"<h2>Centralized development approach</h2>\n<p>With this approach, each developer has a local copy of the code, which is synchronized via source control and uses a single shared database. Developers also use shared media library storage to keep media assets synchronized. There is a&nbsp;<a href=\"https://docs.kentico.com/k10/developing-websites/preparing-your-environment-for-team-development/setting-up-continuous-integration\">continuous integration</a>&nbsp;server (CIS) that monitors changes in source control. When changes are detected, CIS builds and deploys code to an integrated testing environment.<br>\n<br>\nIn this scenario, manual merges may be necessary in the event of conflicts in the code. Additionally, you must implement several techniques such as&nbsp;<a href=\"https://docs.kentico.com/k10/developing-websites/preparing-your-environment-for-team-development/working-with-object-locking\">object locking</a>&nbsp;and&nbsp;<a href=\"https://docs.kentico.com/k10/configuring-kentico/working-with-object-versioning\">object versioning</a>&nbsp;to avoid database conflicts and data loss.<br>\n<br>\nThe testing environment is also connected to the shared development database and media library storage and is used for functionality previewing and testing.</p>\n<h3>Pros</h3>\n<ul>\n  <li>All settings, content, etc. in the database are the same for all developers.</li>\n  <li>Only one database server is needed with only one copy of the database (lower resource requirements).</li>\n  <li>Relatively simple to configure and maintain.</li>\n</ul>\n<h3>Cons</h3>\n<ul>\n  <li><a href=\"https://docs.kentico.com/k10/configuring-kentico/optimizing-website-performance/setting-up-web-farms\">Web farm</a>&nbsp;must be configured (and licensed) in order for caches to be invalidated properly in all environments.\n    <ul>\n      <li>This can be mitigated by using check in/out (locking) and versioning features for objects and content.</li>\n    </ul>\n  </li>\n  <li>Database references to local files can be out of sync. For example, a new web part added to the home page that hasn't been promoted to all environments yet would cause errors for environments that don't have the web part yet.</li>\n</ul>\n<figure data-asset-id=\"717735b3-6aca-42b0-a2fd-f9f35223efd4\" data-image-id=\"717735b3-6aca-42b0-a2fd-f9f35223efd4\"><img src=\"https://assets-us-01.kc-usercontent.com:443/c1b57fce-743a-0048-c4ee-4f8c42ea3ab8/0c6fb937-0e47-479f-887e-522484201b10/dev-shared-db.svg\" data-asset-id=\"717735b3-6aca-42b0-a2fd-f9f35223efd4\" data-image-id=\"717735b3-6aca-42b0-a2fd-f9f35223efd4\" alt=\"\"></figure>\n<h2>Distributed development approach</h2>\n<p>In this approach, all developers have a local copy of the code, which is synchronized via source control and their own copy of the database. Database changes are synchronized via&nbsp;<a href=\"https://docs.kentico.com/k10/developing-websites/preparing-your-environment-for-team-development/setting-up-continuous-integration\">continuous integration</a>&nbsp;feature. There is a continuous integration server (CIS) that monitors changes in source control. When changes are detected, CIS build and deploys code to a testing environment.<br>\n<br>\nIn this scenario, manual merges may be necessary in the event of conflicts for both code and database changes.<br>\n<br>\nThe testing environment also has its own copy of the database and is used for functionality previewing and testing.</p>\n<h3>Pros</h3>\n<ul>\n  <li>Developers have a completely separate environment and can safely experiment with things without affecting other developers.</li>\n  <li>Database changes are tracked in source control and require merging (usually automatic).</li>\n  <li>Allows for portal engine templates to be managed in source control.</li>\n  <li>Allows for deployments of code and SQL changes simultaneously.</li>\n</ul>\n<h3>Cons</h3>\n<ul>\n  <li>Database changes can result in complex merge conflicts.</li>\n  <li>Developers do not have access to real time updates to the data across environments.</li>\n  <li>Not all Kentico objects are supported, so please check the&nbsp;<a href=\"https://docs.kentico.com/k10/developing-websites/preparing-your-environment-for-team-development/setting-up-continuous-integration/object-types-supported-by-continuous-integration\">documentation</a>.</li>\n</ul>\n<figure data-asset-id=\"c0164a83-837d-41a7-9651-c28ad4b300c2\" data-image-id=\"c0164a83-837d-41a7-9651-c28ad4b300c2\"><img src=\"https://assets-us-01.kc-usercontent.com:443/c1b57fce-743a-0048-c4ee-4f8c42ea3ab8/ec79c06c-c5f3-4c5e-ab0d-fd67fa5e40c4/dev-ci.svg\" data-asset-id=\"c0164a83-837d-41a7-9651-c28ad4b300c2\" data-image-id=\"c0164a83-837d-41a7-9651-c28ad4b300c2\" alt=\"\"></figure>\n<h2>Using source control</h2>\n<p>Regardless of the approach you take, you should use some form of source control to keep track of changes in the project and facilitate automated builds and even deployments.<br>\n<br>\nThere are a multitude of options for handling this, but probably the most common is to use Git.&nbsp;To help you get started with Git and Kentico projects, we've created a few articles to help you get your project into source control and doing automated deployments:</p>\n<ul>\n  <li><a href=\"http://devnet.kentico.com/articles/storing-web-configs-in-source-control-safely\">Storing web.configs in source control safely</a></li>\n  <li><a href=\"http://devnet.kentico.com/articles/gitignore-for-kentico\">Gitignore for Kentico</a></li>\n  <li><a href=\"http://devnet.kentico.com/articles/automating-kentico-continuous-integration-with-teamcity-and-github\">Automating Kentico Continuous Integration with TeamCity and GitHub</a></li>\n</ul>\n<h2>Deploying</h2>\n<p>Deploying from a development environment into another environment for testing or production uses is a large topic on its own. This section deals primarily with how to configure your development environment, but we have prepared a whole section on&nbsp;<a href=\"https://kentico-advantage.azurewebsites.net/developing/~/deploying\">deploying</a>.</p>"}}