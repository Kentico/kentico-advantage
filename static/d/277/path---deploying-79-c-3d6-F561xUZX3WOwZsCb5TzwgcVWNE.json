{"data":{"allKenticoCloudItemPhase":{"edges":[{"node":{"elements":{"title":{"value":"Deploying"},"url":{"value":"deploying"},"content":{"value":"<h2>Deployment approaches</h2>\n<p>The first part of deployment to consider is the deployment method. The approach you take depends on a number of factors such as the nature of the changes, project resources, team size, project type, as well as the source and target environments.<br>\n<br>\nThere are two basic approaches:&nbsp;<strong>manual</strong>&nbsp;and&nbsp;<strong>automatic&nbsp;</strong>deployment. In some scenarios you might&nbsp;<strong>combine&nbsp;</strong>these approaches and manually deploy a subset of the changes and automatically deploy the rest.</p>\n<ul>\n  <li>Manual deployment for code generally means copying files via FTP or over a network. For manual deployment of database changes, that means duplicating the changes manually or running SQL scripts manually.</li>\n  <li>Automated deployment of code can be done with build and deployment servers or services. Database changes may also be deployed this way, but may also be handled through built-in&nbsp;<a href=\"https://docs.kentico.com/k10/configuring-kentico/optimizing-website-performance/setting-up-web-farms\">web farm</a>&nbsp;features.</li>\n</ul>\n<p>Regardless of the deployment mechanism, you need to determine&nbsp;<strong>who&nbsp;</strong>will be responsible for deploying changes. This may be a certain person or group for one set of changes and a different group for another set of changes.<br>\n<br>\nAlternately, you might make a server or service responsible for it. If this is the case, assign someone to monitor that. Who is responsible might also depend on the target environment.<br>\n<br>\nFinally, the responsible party needs to know&nbsp;<strong>when&nbsp;</strong>to deploy. You might schedule a change for some maintenance window or push it immediately. Ideally, all of this is determined in advance and there are rules in place to prevent conflicts and ensure that if a deployment goes wrong, you know who to talk to.</p>\n<h2>Deployment tools</h2>\n<p>Kentico provides two means of deploying out of the box:</p>\n<ul>\n  <li>The content&nbsp;<a href=\"https://docs.kentico.com/k10/deploying-websites/content-staging\">staging</a>&nbsp;feature supports media files and&nbsp;<a href=\"https://docs.kentico.com/k10/deploying-websites/content-staging#Contentstaging-Whatcanbesynchronized\">certain database objects</a>, but not code files.</li>\n  <li>The&nbsp;<a href=\"https://docs.kentico.com/k10/deploying-websites/exporting-and-importing-sites\">export and import</a>&nbsp;feature supports media files and&nbsp;<a href=\"https://docs.kentico.com/k10/deploying-websites/exporting-and-importing-sites/export-folder-structure\">certain code files</a>&nbsp;(typically only suitable for web site projects) and&nbsp;<a href=\"https://docs.kentico.com/k10/deploying-websites/exporting-and-importing-sites/exporting-objects\">certain database objects</a>.</li>\n</ul>\n<p>There are lots of third party tools that can be helpful for deployment, such as&nbsp;<a href=\"http://www.bizstreamtoolkit.com/\">Compare for Kentico</a>, TeamCity, Web Deploy, Redgate SQL Compare, Octopus Deploy, and many others.<br>\n<br>\nThe following table provides a summary of tools you can use to synchronize code, media files and database objects.</p>\n<table><tbody>\n  <tr><td>Kentico feature</td><td>Media files</td><td>Code</td><td>Database objects</td></tr>\n  <tr><td>{.lightgray}<a href=\"https://docs.kentico.com/k10/deploying-websites/content-staging\">Content staging</a></td><td>{.green}Supported</td><td>{.red}Not supported</td><td>{.yellow}<a href=\"https://docs.kentico.com/k10/deploying-websites/content-staging#Contentstaging-Whatcanbesynchronized\">Certain objects</a></td></tr>\n  <tr><td>{.lightgray}<a href=\"https://docs.kentico.com/k10/deploying-websites/exporting-and-importing-sites\">Export / Import</a></td><td>{.green}Supported</td><td>{.yellow}<a href=\"https://docs.kentico.com/k10/deploying-websites/exporting-and-importing-sites/export-folder-structure\">Supported objects</a><br>\n<br>\nNote: Suitable only for the web site project.</td><td>{.yellow}<a href=\"https://docs.kentico.com/k10/deploying-websites/exporting-and-importing-sites/exporting-objects\">Certain objects</a><br>\n<br>\nNote: Not designed for incremental deployment of pages.</td></tr>\n</tbody></table>\n<table><tbody>\n  <tr><td>3rd party tools</td><td>Note</td></tr>\n  <tr><td>{.lightgray}e.g., TeamCity, FTP, WebDeploy,<br>\nVisual Studio, Redgate SQL Data Compare</td><td>{.yellow}Tool dependent<br>\n<br>\nNote: In case you work with a web site project type, you can deploy individual code files as opposed when you have a web application or pre-compiled web site where you need to deploy a whole project at once.</td></tr>\n</tbody></table>\n<h2>Deployment process</h2>\n<p>Before you start deploying to any environment, spend some time preparing to eliminate possible issues. The following list of tasks should help you understand the types of things to check:</p>\n<ul>\n  <li>Run&nbsp;<a href=\"https://github.com/Kentico/KInspector\">KInspector</a>&nbsp;and consider the displayed recommendations.</li>\n  <li>Disable features not in use to avoid consuming unnecessary resources (e.g., scheduled tasks, REST module).\n    <ul>\n      <li>Disable debug, enable caching, validate CDN settings, disable unnecessary logging (e.g., content staging), etc.</li>\n      <li>Consider using&nbsp;<a href=\"http://www.bizstreamtoolkit.com/\">Compare for Kentico</a>&nbsp;to help identify differences between your Kentico instances in different environments.</li>\n      <li>Filter out or remove unwanted objects from deployment (e.g., do not select objects starting with \"test_\" prefix or objects stored in a \"test\" folder).</li>\n      <li>Validate that all dependencies are included.</li>\n      <li>Consider including&nbsp;<a href=\"https://docs.kentico.com/k10/deploying-websites/publishing-projects-from-visual-studio#PublishingprojectsfromVisualStudio-Precompilingwebsites\">precompilation</a>&nbsp;to improve the performance and reduce time to first page load after deployment.</li>\n      <li>Be aware that the built-in deployment features do not support a bulk roll-back in case of failed deployment.</li>\n    </ul>\n  </li>\n  <li>Back up the target environment to provide a way to recover in the event of something going wrong.\n    <ul>\n      <li>You want to deploy the code first in most of the cases.</li>\n    </ul>\n  </li>\n  <li>Prepare a maintenance message when deploying with a downtime (e.g., Kentico offline mode or App_Offline.html file).</li>\n</ul>\n<p>During the deployment, monitor the environment (e.g., CPU, RAM, and disk utilization), the application (e.g., event log errors), and take appropriate action when something goes amiss. After the deployment, verify and test that the deployment was successful.</p>"}},"system":{"id":"cdd91a89-a393-43c6-a855-d0d148a64cb5"}}}]}},"pageContext":{"id":"cdd91a89-a393-43c6-a855-d0d148a64cb5","title":"Deploying","content":"<h2>Deployment approaches</h2>\n<p>The first part of deployment to consider is the deployment method. The approach you take depends on a number of factors such as the nature of the changes, project resources, team size, project type, as well as the source and target environments.<br>\n<br>\nThere are two basic approaches:&nbsp;<strong>manual</strong>&nbsp;and&nbsp;<strong>automatic&nbsp;</strong>deployment. In some scenarios you might&nbsp;<strong>combine&nbsp;</strong>these approaches and manually deploy a subset of the changes and automatically deploy the rest.</p>\n<ul>\n  <li>Manual deployment for code generally means copying files via FTP or over a network. For manual deployment of database changes, that means duplicating the changes manually or running SQL scripts manually.</li>\n  <li>Automated deployment of code can be done with build and deployment servers or services. Database changes may also be deployed this way, but may also be handled through built-in&nbsp;<a href=\"https://docs.kentico.com/k10/configuring-kentico/optimizing-website-performance/setting-up-web-farms\">web farm</a>&nbsp;features.</li>\n</ul>\n<p>Regardless of the deployment mechanism, you need to determine&nbsp;<strong>who&nbsp;</strong>will be responsible for deploying changes. This may be a certain person or group for one set of changes and a different group for another set of changes.<br>\n<br>\nAlternately, you might make a server or service responsible for it. If this is the case, assign someone to monitor that. Who is responsible might also depend on the target environment.<br>\n<br>\nFinally, the responsible party needs to know&nbsp;<strong>when&nbsp;</strong>to deploy. You might schedule a change for some maintenance window or push it immediately. Ideally, all of this is determined in advance and there are rules in place to prevent conflicts and ensure that if a deployment goes wrong, you know who to talk to.</p>\n<h2>Deployment tools</h2>\n<p>Kentico provides two means of deploying out of the box:</p>\n<ul>\n  <li>The content&nbsp;<a href=\"https://docs.kentico.com/k10/deploying-websites/content-staging\">staging</a>&nbsp;feature supports media files and&nbsp;<a href=\"https://docs.kentico.com/k10/deploying-websites/content-staging#Contentstaging-Whatcanbesynchronized\">certain database objects</a>, but not code files.</li>\n  <li>The&nbsp;<a href=\"https://docs.kentico.com/k10/deploying-websites/exporting-and-importing-sites\">export and import</a>&nbsp;feature supports media files and&nbsp;<a href=\"https://docs.kentico.com/k10/deploying-websites/exporting-and-importing-sites/export-folder-structure\">certain code files</a>&nbsp;(typically only suitable for web site projects) and&nbsp;<a href=\"https://docs.kentico.com/k10/deploying-websites/exporting-and-importing-sites/exporting-objects\">certain database objects</a>.</li>\n</ul>\n<p>There are lots of third party tools that can be helpful for deployment, such as&nbsp;<a href=\"http://www.bizstreamtoolkit.com/\">Compare for Kentico</a>, TeamCity, Web Deploy, Redgate SQL Compare, Octopus Deploy, and many others.<br>\n<br>\nThe following table provides a summary of tools you can use to synchronize code, media files and database objects.</p>\n<table><tbody>\n  <tr><td>Kentico feature</td><td>Media files</td><td>Code</td><td>Database objects</td></tr>\n  <tr><td>{.lightgray}<a href=\"https://docs.kentico.com/k10/deploying-websites/content-staging\">Content staging</a></td><td>{.green}Supported</td><td>{.red}Not supported</td><td>{.yellow}<a href=\"https://docs.kentico.com/k10/deploying-websites/content-staging#Contentstaging-Whatcanbesynchronized\">Certain objects</a></td></tr>\n  <tr><td>{.lightgray}<a href=\"https://docs.kentico.com/k10/deploying-websites/exporting-and-importing-sites\">Export / Import</a></td><td>{.green}Supported</td><td>{.yellow}<a href=\"https://docs.kentico.com/k10/deploying-websites/exporting-and-importing-sites/export-folder-structure\">Supported objects</a><br>\n<br>\nNote: Suitable only for the web site project.</td><td>{.yellow}<a href=\"https://docs.kentico.com/k10/deploying-websites/exporting-and-importing-sites/exporting-objects\">Certain objects</a><br>\n<br>\nNote: Not designed for incremental deployment of pages.</td></tr>\n</tbody></table>\n<table><tbody>\n  <tr><td>3rd party tools</td><td>Note</td></tr>\n  <tr><td>{.lightgray}e.g., TeamCity, FTP, WebDeploy,<br>\nVisual Studio, Redgate SQL Data Compare</td><td>{.yellow}Tool dependent<br>\n<br>\nNote: In case you work with a web site project type, you can deploy individual code files as opposed when you have a web application or pre-compiled web site where you need to deploy a whole project at once.</td></tr>\n</tbody></table>\n<h2>Deployment process</h2>\n<p>Before you start deploying to any environment, spend some time preparing to eliminate possible issues. The following list of tasks should help you understand the types of things to check:</p>\n<ul>\n  <li>Run&nbsp;<a href=\"https://github.com/Kentico/KInspector\">KInspector</a>&nbsp;and consider the displayed recommendations.</li>\n  <li>Disable features not in use to avoid consuming unnecessary resources (e.g., scheduled tasks, REST module).\n    <ul>\n      <li>Disable debug, enable caching, validate CDN settings, disable unnecessary logging (e.g., content staging), etc.</li>\n      <li>Consider using&nbsp;<a href=\"http://www.bizstreamtoolkit.com/\">Compare for Kentico</a>&nbsp;to help identify differences between your Kentico instances in different environments.</li>\n      <li>Filter out or remove unwanted objects from deployment (e.g., do not select objects starting with \"test_\" prefix or objects stored in a \"test\" folder).</li>\n      <li>Validate that all dependencies are included.</li>\n      <li>Consider including&nbsp;<a href=\"https://docs.kentico.com/k10/deploying-websites/publishing-projects-from-visual-studio#PublishingprojectsfromVisualStudio-Precompilingwebsites\">precompilation</a>&nbsp;to improve the performance and reduce time to first page load after deployment.</li>\n      <li>Be aware that the built-in deployment features do not support a bulk roll-back in case of failed deployment.</li>\n    </ul>\n  </li>\n  <li>Back up the target environment to provide a way to recover in the event of something going wrong.\n    <ul>\n      <li>You want to deploy the code first in most of the cases.</li>\n    </ul>\n  </li>\n  <li>Prepare a maintenance message when deploying with a downtime (e.g., Kentico offline mode or App_Offline.html file).</li>\n</ul>\n<p>During the deployment, monitor the environment (e.g., CPU, RAM, and disk utilization), the application (e.g., event log errors), and take appropriate action when something goes amiss. After the deployment, verify and test that the deployment was successful.</p>"}}