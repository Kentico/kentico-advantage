{"version":3,"sources":["webpack:///./src/pages/{kontentItemPage.elements__url__value}.js"],"names":["page","data","allKontentItemPage","edges","node","pageId","system","id","elements","title","value","className","url","header","dangerouslySetInnerHTML","__html","teaser","content","images","links","resolveImage","image","src","alt","description","resolveLink","link","domNode","to","url_slug","children","references","Array","isArray","length","query"],"mappings":"2FAAA,2LAWe,sBAAa,IAClBA,EADiB,EAAVC,KACKC,mBAAmBC,MAAM,GAAGC,KAE9C,OACI,kBAAC,IAAD,CAAQC,OAAQL,EAAKM,OAAOC,IACxB,kBAAC,IAAD,KACI,+BAAQP,EAAKQ,SAASC,MAAMC,QAGhC,kBAAC,IAAD,CAAaL,OAAQL,EAAKM,OAAOC,KAEjC,8BACI,kBAAC,IAAD,CACII,UAAU,gCACVX,KAAMA,EAAKQ,SAASI,IAAIF,MACxBG,OAAQb,EAAKQ,SAASC,MAAMC,QAGhC,kBAAC,IAAD,KACI,0BAAMI,wBAAyB,CAACC,OAAQf,EAAKQ,SAASQ,OAAON,UAGjE,kBAAC,IAAD,KAEI,kBAAC,kBAAD,CACAA,MAAOV,EAAKQ,SAASS,QAAQP,MAC7BQ,OAAQlB,EAAKQ,SAASS,QAAQC,OAC9BC,MAAOnB,EAAKQ,SAASS,QAAQE,MAC7BC,aAAc,SAAAC,GACZ,OACE,yBACEC,IAAKD,EAAMT,IACXW,IAAKF,EAAMG,eAIjBC,YAAa,SAACC,EAAMC,GAClB,OACE,kBAAC,OAAD,CAAMC,GAAE,IAAMF,EAAKG,UAChBF,EAAQG,SAAS,GAAG7B,UAO9BD,EAAKQ,SAASuB,YAAcC,MAAMC,QAAQjC,EAAKQ,SAASuB,WAAWrB,QAAUV,EAAKQ,SAASuB,WAAWrB,MAAMwB,OAAS,GAClH,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAYjC,KAAMD,EAAKQ,SAASuB,WAAWrB,YAO5D,IAAMyB,EAAK","file":"component---src-pages-kontent-item-page-elements-url-value-js-9d6328006e09c11410df.js","sourcesContent":["import React from \"react\"\nimport Layout from \"../components/layout\"\nimport Jumbotron from \"../components/jumbotron\"\nimport Helmet from 'react-helmet'\nimport Teaser from \"../components/teaser\"\nimport ContentZone from \"../components/content-zone\"\nimport Breadcrumbs from \"../components/breadcrumbs\"\nimport References from \"../components/references\"\nimport { RichTextElement } from \"@kentico/gatsby-kontent-components\"\nimport { graphql, Link } from \"gatsby\"\n\nexport default ({data}) => {\n    const page = data.allKontentItemPage.edges[0].node;\n\n    return (\n        <Layout pageId={page.system.id}>\n            <Helmet>\n                <title>{page.elements.title.value}</title>\n            </Helmet>\n            \n            <Breadcrumbs pageId={page.system.id} />\n            \n            <main>\n                <Jumbotron\n                    className=\"jumbotron-content-page violet\"\n                    page={page.elements.url.value}\n                    header={page.elements.title.value}\n                />\n\n                <Teaser>\n                    <span dangerouslySetInnerHTML={{__html: page.elements.teaser.value}}></span>\n                </Teaser>\n\n                <ContentZone>\n                    {/* <div dangerouslySetInnerHTML={{__html: page.elements.content.resolvedHtml}}></div> */}\n                    <RichTextElement\n                    value={page.elements.content.value}\n                    images={page.elements.content.images}\n                    links={page.elements.content.links}\n                    resolveImage={image => {\n                      return (\n                        <img\n                          src={image.url}\n                          alt={image.description}\n                        />\n                      )\n                    }}\n                    resolveLink={(link, domNode) => {\n                      return (\n                        <Link to={`/${link.url_slug}`}>\n                          {domNode.children[0].data}\n                        </Link>\n                      )\n                    }}\n                  />\n                </ContentZone>\n                \n                {page.elements.references && Array.isArray(page.elements.references.value) && page.elements.references.value.length > 0 &&\n                    <ContentZone>\n                        <References data={page.elements.references.value} />\n                    </ContentZone>\n                }\n            </main>\n        </Layout>\n        );\n    }\nexport const query = graphql`\n    query($id: String!) {\n        allKontentItemPage(filter: {id: {eq: $id}}) {\n    edges {\n      node {\n        elements {\n          title {\n            value\n          }\n          url {\n            value\n          }\n          content {\n            value\n            images {\n              image_id\n              url\n              description\n            }\n            links {\n              link_id\n              url_slug\n            }\n          }\n          teaser {\n            value\n          }\n          references {\n            value {\n              ... on kontent_item_link {\n                elements {\n                  title {\n                    value\n                  }\n                  url {\n                    value\n                  }\n                }\n                system {\n                  id\n                }\n              }\n            }\n          }\n        }\n        system {\n          id\n        }\n      }\n    }\n  }\n    }\n`"],"sourceRoot":""}